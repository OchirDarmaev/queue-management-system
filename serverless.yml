org: odarmaev
app: queue-management-system
service: queue-management-system
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-east-1
  profile: "serverlessUser"
  environment:
    ONE_TABLE: ${self:service}-${sls:stage}
    USER_POOL_NAME: ${self:service}-${sls:stage}-user-pool
    USER_POOL_CLIENT_NAME: ${self:service}-${sls:stage}-user-pool-client
    USER_POOL_DOMAIN: ${self:service}-${sls:stage}-user-pool-domain
    TOPIC_PREFIX: ${self:service}/${sls:stage}
    IDENTITY_POOL_NAME: ${self:service}-${sls:stage}-identity-pool

  httpApi:
    cors: true
    authorizers:
      myAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}"
        audience:
          - !Sub "${CognitoUserPoolClient}"
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:ConditionCheckItem
            - dynamodb:BatchGetItem
          Resource:
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ONE_TABLE}"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ONE_TABLE}/index/*"
        - Effect: Allow
          Action:
            - iot:Publish
          Resource:
            - "arn:aws:iot:${opt:region, self:provider.region}:*:topic/${self:service}/${sls:stage}/*"
functions:
  #ServicePoint
  createServicePoint:
    handler: src/functions/service-points/create-service-point/handler.handler
    events:
      - httpApi:
          method: POST
          path: /servicePoints
          authorizer:
            name: myAuthorizer
  getServicePoint:
    handler: src/functions/service-points/get-service-point/handler.handler
    events:
      - httpApi:
          method: GET
          path: /servicePoints/{servicePointId}
          authorizer:
            name: myAuthorizer
  getServicePoints:
    handler: src/functions/service-points/get-service-points/handler.handler
    events:
      - httpApi:
          method: GET
          path: /servicePoints
          authorizer:
            name: myAuthorizer
  updateServicePoint:
    handler: src/functions/service-points/update-service-point/handler.handler
    events:
      - httpApi:
          method: PUT
          path: /servicePoints/{servicePointId}
          authorizer:
            name: myAuthorizer
  updateServicePointStatus:
    handler: src/functions/service-points/update-service-point-status/handler.handler
    events:
      - httpApi:
          method: PUT
          path: /servicePoints/{servicePointId}/status/{status}
          authorizer:
            name: myAuthorizer
  processNewQueueItem:
    handler: src/functions/service-points/update-service-point-status/handler.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [OneTable, StreamArn]
          filterPatterns:
            - eventName: [INSERT]
              dynamodb:
                NewImage:
                  PK:
                    S: [Q#]

  deleteServicePoint:
    handler: src/functions/service-points/delete-service-point/handler.handler
    events:
      - httpApi:
          method: DELETE
          path: /servicePoints/{servicePointId}
          authorizer:
            name: myAuthorizer

  #Service
  createService:
    handler: src/functions/services/create-service/handler.handler
    events:
      - httpApi:
          method: POST
          path: /services
          authorizer:
            name: myAuthorizer
  getServices:
    handler: src/functions/services/get-services/handler.handler
    events:
      - httpApi:
          method: GET
          path: /services
          authorizer:
            name: myAuthorizer

  getService:
    handler: src/functions/services/get-service/handler.handler
    events:
      - httpApi:
          method: GET
          path: /services/{serviceId}
          authorizer:
            name: myAuthorizer
  updateService:
    handler: src/functions/services/update-service/handler.handler
    events:
      - httpApi:
          method: PUT
          path: /services/{serviceId}
          authorizer:
            name: myAuthorizer
  deleteService:
    handler: src/functions/services/delete-service/handler.handler
    events:
      - httpApi:
          method: DELETE
          path: /services/{serviceId}
          authorizer:
            name: myAuthorizer

  # queue
  createQueueItem:
    handler: src/functions/queues/create-queue-item/handler.handler
    events:
      - httpApi:
          method: POST
          path: "/queues"
          authorizer:
            name: myAuthorizer
  getQueueItem:
    handler: src/functions/queues/get-queue-item/handler.handler
    events:
      - httpApi:
          method: GET
          path: "/queues/{queueId}"
          authorizer:
            name: myAuthorizer
  getQueueItems:
    handler: src/functions/queues/get-queue-items/handler.handler
    events:
      - httpApi:
          method: GET
          path: "/services/{serviceId}/queue"
          authorizer:
            name: myAuthorizer
  updateQueueItem:
    handler: src/functions/queues/update-queue-item/handler.handler
    events:
      - httpApi:
          method: PUT
          path: "/queues/{queueId}"
          authorizer:
            name: myAuthorizer

  #Board
  getQueueStatus:
    handler: src/functions/boards/get-board-status/handler.handler
    events:
      - httpApi:
          method: GET
          path: "/boards/status"
          authorizer:
            name: myAuthorizer
  sendUpdatesToBoard:
    handler: src/functions/boards/send-updates-to-board/handler.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [OneTable, StreamArn]
          filterPatterns:
            - eventName: [INSERT, MODIFY]
              dynamodb:
                NewImage:
                  PK:
                    S: [Q#]

plugins:
  - serverless-esbuild
  - serverless-dynamodb-local
  - serverless-offline

custom:
  esbuild:
    minify: false
    sourcemap: linked
    keepNames: true
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      # Comment if you don't have a DynamoDB running locally
      noStart: true
    migration:
      dir: offline/migrations

resources:
  Resources:
    OneTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: "PK"
            AttributeType: "S"
          - AttributeName: "SK"
            AttributeType: "S"
          - AttributeName: "GSI1PK"
            AttributeType: "S"
          - AttributeName: "GSI1SK"
            AttributeType: "S"

        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: "GSI1"
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: "ALL"
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.ONE_TABLE}
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"

    CognitoIdentityPool:
      Type: "AWS::Cognito::IdentityPool"
      Properties:
        IdentityPoolName: ${self:provider.environment.IDENTITY_POOL_NAME}
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: "CognitoUserPoolClient"
            ProviderName:
              Fn::GetAtt: [CognitoUserPool, ProviderName]
    CognitoUnAuthorizedRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "queue-management-system-unauthorized-role"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": unauthenticated
        Policies:
          - PolicyName: "CognitoUnauthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                  Resource: "*"

    # Create a role for authorized access to AWS resources. Control what your user can access. This example only allows Lambda invocation
    # Only allows users in the previously created Identity Pool
    CognitoAuthorizedRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "queue-management-system-authorized-role"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/AWSIoTDataAccess"

    IdentityPoolRoleMapping:
      Type: "AWS::Cognito::IdentityPoolRoleAttachment"
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            "Fn::GetAtt": [CognitoAuthorizedRole, Arn]
          unauthenticated:
            "Fn::GetAtt": [CognitoUnAuthorizedRole, Arn]

    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        UserPoolName: ${self:provider.environment.USER_POOL_NAME}
        UsernameAttributes:
          - "email"
        AutoVerifiedAttributes:
          - "email"
    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:provider.environment.USER_POOL_CLIENT_NAME}
        UserPoolId:
          Ref: "CognitoUserPool"
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"
          - "USER_PASSWORD_AUTH"
        GenerateSecret: false
    UserPoolDomain:
      Type: "AWS::Cognito::UserPoolDomain"
      Properties:
        Domain: ${self:provider.environment.USER_POOL_DOMAIN}
        UserPoolId:
          Ref: "CognitoUserPool"

    GroupAdmin:
      Type: "AWS::Cognito::UserPoolGroup"
      Properties:
        GroupName: "admin"
        Description: "Admin group for queue management system"
        UserPoolId:
          Ref: "CognitoUserPool"
        Precedence: 1
        RoleArn:
          Fn::GetAtt: [AdminRole, Arn]
    GroupSpecialist:
      Type: "AWS::Cognito::UserPoolGroup"
      Properties:
        GroupName: "specialist"
        Description: "Specialist group for queue management system"
        UserPoolId:
          Ref: "CognitoUserPool"
        Precedence: 2
    GroupClient:
      Type: "AWS::Cognito::UserPoolGroup"
      Properties:
        GroupName: "client"
        Description: "Client group for queue management system"
        UserPoolId:
          Ref: "CognitoUserPool"
        Precedence: 3
    AdminRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "queue-management-system-admin-role"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: "CognitoUserPool"
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": "authenticated"
