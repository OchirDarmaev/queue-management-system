org: odarmaev
app: queue-management-system
service: queue-management-system
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  environment:
    ONE_TABLE: ${self:service}-${sls:stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ONE_TABLE}"

functions:
  #ServicePoint
  createServicePoint:
    handler: src/servicePoints/servicePoints.handler
    events:
      - http:
          method: POST
          path: /servicePoints
  getAllServicePoints:
    handler: src/servicePoints/servicePoints.handler
    events:
      - http:
          method: GET
          path: /servicePoints
  updateServicePoint:
    handler: src/servicePoints/servicePoints.handler
    events:
      - http:
          method: PUT
          path: /servicePoints/{id}
  #Service
  createService:
    handler: src/services/services.handler
    events:
      - http:
          method: POST
          path: /services
  getAllServices:
    handler: src/services/services.handler
    events:
      - http:
          method: GET
          path: /services
  updateService:
    handler: src/services/services.handler
    events:
      - http:
          method: PUT
          path: /services/{serviceId}
  deleteService:
    handler: src/services/services.handler
    events:
      - http:
          method: DELETE
          path: /services/{serviceId}

  addNewClientToQueue:
    handler: src/clients/clients.addNewClientToQueueHandler
    events:
      - http:
          method: POST
          path: /services/{serviceId}/clients
  getQueuePosition:
    handler: src/clients/clients.getQueuePositionByClientIdHandler
    events:
      - http:
          method: GET
          path: /services/{serviceId}/clients/{clientId}/queuePosition
  #Client
  getQueue:
    handler: src/clients/clients.getQueueHandler
    events:
      - http:
          method: GET
          path: /clients
  updateClient:
    handler: src/clients/clients.handler
    events:
      - http:
          method: PUT
          path: /clients/{clientId}
 

plugins:
  - serverless-esbuild
  - serverless-dynamodb-local
  - serverless-offline

custom:
  esbuild:
    minify: false
    sourcemap: linked
    keepNames: true
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      # Comment if you don't have a DynamoDB running locally
      noStart: true
    migration:
      dir: offline/migrations

resources:
  Resources:
    OneTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.ONE_TABLE}
