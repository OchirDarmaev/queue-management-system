org: odarmaev
app: queue-management-system
service: queue-management-system
frameworkVersion: '3'


provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  environment:
    QUEUES_TABLE: ${self:service}-${sls:stage}-queues
    SERVICE_POINTS_TABLE: ${self:service}-${sls:stage}-service-points
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.QUEUES_TABLE}"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SERVICE_POINTS_TABLE}"

functions:
  createServicePoint:
    handler: src/servicePoints/handler.createServicePoint
    events:
      - http:
          method: POST
          path: /servicePoints
  deleteServicePoint:
    handler: src/servicePoints/handler.deleteServicePoint
    events:
      - http:
          method: DELETE
          path: /servicePoints/{id}
  getAllServicePoints:
    handler: src/servicePoints/handler.getAllServicePoints
    events:
      - http:
          method: GET
          path: /servicePoints

  createQueue:
    handler: src/queues/handler.createQueue
    events:
      - http:
          method: POST
          path: /queues
  deleteQueue:
    handler: src/queues/handler.deleteQueue
    events:
      - http:
          method: DELETE
          path: /queues/{id}
  getAllQueues:
    handler: src/queues/handler.getAllQueues
    events:
      - http:
          method: GET
          path: /queues
   


plugins:
  - serverless-esbuild
  - serverless-dynamodb-local
  - serverless-offline


custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    # Comment if you don't have a DynamoDB running locally
      noStart: true
    migration:
      dir: offline/migrations
 

resources:
  Resources:
    QueuesTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.QUEUES_TABLE}
    ServicePointsTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.SERVICE_POINTS_TABLE}