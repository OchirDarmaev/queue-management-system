org: odarmaev
app: queue-management-system
service: queue-management-system
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  environment:
    SERVICE_POINTS_TABLE: ${self:service}-${sls:stage}-service-points
    CLIENTS_TABLE: ${self:service}-${sls:stage}-clients
    SERVICES_TABLE: ${self:service}-${sls:stage}-services
    COUNTERS_TABLE: ${self:service}-${sls:stage}-counters
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SERVICE_POINTS_TABLE}"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CLIENTS_TABLE}"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SERVICES_TABLE}"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.COUNTERS_TABLE}"

functions:
  #ServicePoint
  createServicePoint:
    handler: src/servicePoints/servicePoints.handler
    events:
      - http:
          method: POST
          path: /servicePoints
  getAllServicePoints:
    handler: src/servicePoints/servicePoints.handler
    events:
      - http:
          method: GET
          path: /servicePoints
  updateServicePoint:
    handler: src/servicePoints/servicePoints.handler
    events:
      - http:
          method: PUT
          path: /servicePoints/{id}
  #Service
  createService:
    handler: src/services/services.handler
    events:
      - http:
          method: POST
          path: /services
  getAllServices:
    handler: src/services/services.handler
    events:
      - http:
          method: GET
          path: /services
  updateService:
    handler: src/services/services.handler
    events:
      - http:
          method: PUT
          path: /services/{id}
  #Client
  addNewClientToQueue:
    handler: src/clients/clients.addNewClientToQueueHandler
    events:
      - http:
          method: POST
          path: /clients/addNewClientToQueue/{serviceId}
  getQueue:
    handler: src/clients/clients.getQueueHandler
    events:
      - http:
          method: GET
          path: /clients
  updateClient:
    handler: src/clients/clients.handler
    events:
      - http:
          method: PUT
          path: /clients/{clientId}
  getQueuePosition:
    handler: src/clients/clients.getQueuePositionHandler
    events:
      - http:
          method: GET
          path: /clients/queuePositionByNumber/{clientNumber}


plugins:
  - serverless-esbuild
  - serverless-dynamodb-local
  - serverless-offline

custom:
  esbuild:
    minify: false
    sourcemap: linked
    keepNames: true
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      # Comment if you don't have a DynamoDB running locally
      noStart: true
    migration:
      dir: offline/migrations

resources:
  Resources:
    ServicePointsTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.SERVICE_POINTS_TABLE}
    ClientsTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CLIENTS_TABLE}
    ServicesTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.SERVICES_TABLE}


    CountersTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.COUNTERS_TABLE}

