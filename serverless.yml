org: odarmaev
app: queue-management-system
service: queue-management-system
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  profile: "serverlessUser"
  environment:
    ONE_TABLE: ${self:service}-${sls:stage}
    USER_POOL_NAME: ${self:service}-${sls:stage}-user-pool
    USER_POOL_CLIENT_NAME: ${self:service}-${sls:stage}-user-pool-client
    USER_POOL_DOMAIN: ${self:service}-${sls:stage}-user-pool-domain
  httpApi:
    authorizers:
      myAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}"
        audience:
          - !Sub "${CognitoUserPoolClient}"
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:ConditionCheckItem
          Resource: 
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ONE_TABLE}"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ONE_TABLE}/index/*"

functions:
  #test
  testProtected:
    handler: src/test/test.handlerProtected
    events:
      - httpApi:
          method: GET
          path: /test/protected
          authorizer:
            name: myAuthorizer

  testPublic:
    handler: src/test/test.handlerPublic
    events:
      - http:
          method: GET
          path: /test/public

  #ServicePoint
  createServicePoint:
    handler: src/servicePoints/servicePoints.createServicePointHandler
    events:
      - http:
          method: POST
          path: /servicePoints
  getServicePoint:
    handler: src/servicePoints/servicePoints.getServicePointHandler
    events:
      - http:
          method: GET
          path: /servicePoints/{servicePointId}
  getServicePoints:
    handler: src/servicePoints/servicePoints.getServicePointsHandler
    events:
      - http:
          method: GET
          path: /servicePoints
  updateServicePoint:
    handler: src/servicePoints/servicePoints.updateServicePointHandler
    events:
      - http:
          method: PUT
          path: /servicePoints/{servicePointId}
  updateServicePointStatus:
    handler: src/servicePoints/servicePoints.updateServicePointStatusHandler
    events:
      - http:
          method: PUT
          path: /servicePoints/{servicePointId}/status/{status}
  updateServicePointStatusNewItem:
    handler: src/servicePoints/servicePoints.servicePointStreamHandler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [OneTable, StreamArn]
          filterPatterns:
            - eventName: [INSERT]
              dynamodb:
                NewImage:
                  PK:
                    S: [Q#]

  removeServicePoint:
    handler: src/servicePoints/servicePoints.removeServicePointHandler
    events:
      - http:
          method: DELETE
          path: /servicePoints/{servicePointId}

  #Service
  createService:
    handler: src/services/services.handler
    events:
      - http:
          method: POST
          path: /services
  getAllServices:
    handler: src/services/services.handler
    events:
      - http:
          method: GET
          path: /services

  getService:
    handler: src/services/services.getServiceHandler
    events:
      - http:
          method: GET
          path: /services/{serviceId}
  updateService:
    handler: src/services/services.handler
    events:
      - http:
          method: PUT
          path: /services/{serviceId}
  deleteService:
    handler: src/services/services.handler
    events:
      - http:
          method: DELETE
          path: /services/{serviceId}
  
  # queue
  createQueueItem:
    handler: src/queue/queue.createQueueItemHandler
    events:
      - http:
          method: POST
          path: "/services/{serviceId}/queue"
  getQueueItems:
    handler: src/queue/queue.getQueueItemsHandler
    events:
      - http:
          method: GET
          path: "/services/{serviceId}/queue"
  updateQueueItem:
    handler: src/queue/queue.updateQueueItemHandler
    events:
      - http:
          method: PUT
          path: "/queue/{queueId}"
  getQueueItem:
    handler: src/queue/queue.getQueueItemHandler
    events:
      - http:
          method: GET
          path: "/queue/{queueId}"
  getQueueStatus:
    handler: src/queue/queue.getQueueStatusHandler
    events:
      - http:
          method: GET
          path: "/queue/status"

plugins:
  - serverless-esbuild
  - serverless-dynamodb-local
  - serverless-offline

custom:
  esbuild:
    minify: false
    sourcemap: linked
    keepNames: true
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      # Comment if you don't have a DynamoDB running locally
      noStart: true
    migration:
      dir: offline/migrations

resources:
  Resources:
    OneTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: "PK"
            AttributeType: "S"
          - AttributeName: "SK"
            AttributeType: "S"
          - AttributeName: "GSI1PK"
            AttributeType: "S"
          - AttributeName: "GSI1SK"
            AttributeType: "S"

        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: "GSI1"
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: "ALL"
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.ONE_TABLE}
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"

    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        UserPoolName: ${self:provider.environment.USER_POOL_NAME}
        UsernameAttributes:
          - "email"
        AutoVerifiedAttributes:
          - "email"
    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:provider.environment.USER_POOL_CLIENT_NAME}
        UserPoolId:
          Ref: "CognitoUserPool"
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"
          - "USER_PASSWORD_AUTH"
        GenerateSecret: false
    UserPoolDomain:
      Type: "AWS::Cognito::UserPoolDomain"
      Properties:
        Domain: ${self:provider.environment.USER_POOL_DOMAIN}
        UserPoolId:
          Ref: "CognitoUserPool"
